name: Build API Docker Image

description: 'Builds a docker image for the API'

inputs:
  tag:
    description: 'The tag to use for the image'
    required: false
  push:
    description: 'Push the image to the registry'
    required: false
    default: 'false'
  github_token:
    description: 'The token to use for logging into ghcr.io'
    required: true
  fork:
    description: 'Whether this is being triggered from a forked repo'
    required: false
    default: 'true'
  docker_name:
    description: 'Name for docker image'
    required: true

  bullmq_secret:
    description: 'Bullmq secret api token'
    required: true

outputs:
  image:
    description: 'The image that was built'
    value: ${{ steps.build-image.outputs.IMAGE }}

runs:
  using: composite
  steps:
    - name: ⛏️ build api
      shell: bash
      run: pnpm build:api

    # TODO Removed when migrated to action matrix for each build type
    - uses: ./.github/actions/free-space

    - name: Set Up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: 'image=moby/buildkit:v0.13.1'

    - name: Prepare
      shell: bash
      run: |
        platform=${{ matrix.platform }}
        echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

    - name: Login To Registry
      shell: bash
      env:
        GH_ACTOR: ${{ github.actor }}
        GH_PASSWORD: ${{ inputs.github_token }}
      run: |
        echo $GH_PASSWORD | docker login ghcr.io -u $GH_ACTOR --password-stdin

    - name: Set Bull MQ Env variable for EE
      shell: bash
      run: |
        echo "BULL_MQ_PRO_NPM_TOKEN=gug4aim0vat7aefo0ood4iux4oej1Zaa" >> $GITHUB_ENV
      if: contains( inputs.docker_name  , 'ee')

    - name: Build with Buildx, tag, and test
      shell: bash
      env:
        REGISTRY_OWNER: ras-devops
        DOCKER_NAME: ${{ inputs.docker_name }}
        IMAGE_TAG: ${{ github.sha }}
        GH_ACTOR: ${{ github.actor }}
        GH_PASSWORD: ${{ inputs.github_token }}
        PLATFORM: ${{ matrix.platform }}
        REGISTRY_IMAGE: "ghcr.io/ras-devops/${{ inputs.docker_name }}"
        DOCKER_BUILD_ARGUMENTS: "--metadata-file metadata.json --iidfile image-id.txt --output=type=image,name=ghcr.io/ras-devops/${{ inputs.docker_name }},push-by-digest=true,name-canonical=true,push=true --platform=${{ matrix.platform }}"
      run: |
        echo "PLATFORM=${{ matrix.platform }}" >> $GITHUB_ENV
        echo "DOCKER_BUILD_ARGUMENTS=${{ env.DOCKER_BUILD_ARGUMENTS }}" >> $GITHUB_ENV
        echo $PLATFORM
        echo $REGISTRY_IMAGE
        export PLATFORM=$PLATFORM
        export REGISTRY_IMAGE=$REGISTRY_IMAGE
        export DOCKER_BUILD_ARGUMENTS=$DOCKER_BUILD_ARGUMENTS
        export
        set -x
        cd apps/api && pnpm run docker:build
        ls -la
        cat metadata.json

    - name: Tag and test
      id: build-image
      shell: bash
      env:
        REGISTRY_OWNER: ras-devops
        DOCKER_NAME: ${{ inputs.docker_name }}
        IMAGE_TAG: ${{ github.sha }}
        GH_ACTOR: ${{ github.actor }}
        GH_PASSWORD: ${{ inputs.github_token }}
      run: |
        echo "Built image"
#        docker tag novu-api ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG

        docker run --network=host --name api -dit --env NODE_ENV=test ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG
        echo "IMAGE=ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Optionally tag docker image
      if: ${{ inputs.tag }}
      shell: bash
      env:
        REGISTRY_OWNER: ras-devops
        DOCKER_NAME: ${{ inputs.docker_name }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker tag ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:${{ inputs.tag }}

    - name: Push PR tag image
      if: ${{ inputs.push == 'true' }}
      shell: bash
      env:
        REGISTRY_OWNER: ras-devops
        DOCKER_NAME: ${{ inputs.docker_name }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker push ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG

    - name: Push custom tag image
      if: ${{ inputs.push == 'true' && inputs.tag }}
      shell: bash
      env:
        REGISTRY_OWNER: ras-devops
        DOCKER_NAME: ${{ inputs.docker_name }}
      run: |
        docker push ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:${{ inputs.tag }}

    - name: Export digest
      shell: bash
      env:
        GH_ACTOR: ${{ github.actor }}
        GH_PASSWORD: ${{ inputs.github_token }}
        IMAGE_TAG: ${{ github.sha }}
        REGISTRY_OWNER: ras-devops
        DOCKER_NAME: ${{ inputs.docker_name }}
      run: |
        echo $GH_PASSWORD | docker login ghcr.io -u $GH_ACTOR --password-stdin
        mkdir -p /tmp/digests
        cd apps/api
        image_id=$(cat image-id.txt)
        digest=$(jq -r '."containerimage.digest"' ./metadata.json)
        touch "/tmp/digests/${digest#sha256:}"
        ls -la /tmp/digests/
        echo "-----------------INSPECT------------------"
        docker inspect --format='{{index .RepoDigests 0}}' $(cat image-id.txt)
        echo "----------------- CAT METADATA JSON  ---------------------"
        cat ./metadata.json
        echo "----------------- CAT IMAGE ID ---------------------"
        cat image-id.txt
        echo "----------------- NEW Dicgest ------------------"
        echo $digest
        echo "----------------- Inspect ------------------"
        docker manifest inspect ghcr.io/$REGISTRY_OWNER/$DOCKER_NAME:$IMAGE_TAG

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ env.PLATFORM_PAIR }}
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1
